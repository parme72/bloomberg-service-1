/*
* This file is automatically generated. Do not modify it directly.
*/

let clientPromise;
const getClient = () => {
    return clientPromise ?? (clientPromise = (async () => {
        if (!window.fin) {
            return null;
        }

        const cbs = {};
        const cc = await fin.InterApplicationBus.Channel.connect('bloomberg-terminalapi-service/v1');
        const clientId = fin.desktop.getUuid();
        const identity = {
            uuid: fin.desktop.Application.getCurrent().uuid,
            name: fin.desktop.Frame.getCurrent().name
        };

        cc.register('__dispatchEvent', (evt) => {
            let cb = cbs[evt.type];
            if (cb) {
                cb.forEach((c) => { c(evt); });
            }
            return true;
        });

        cc.register('__getclientId', () => clientId);

        cc.register('__logMessage', (message) => {
            switch (message.type) {
                case 'warn':
                    console.warn(message.text, (message.args ?? []).length > 0 ? message.args : '');
                case 'info':
                default:
                    console.log(message.text, (message.args ?? []).length > 0 ? message.args : '');
            }
        });

        return {
            addEventListener: (type, listener) => { (cbs[type] || (cbs[type] = [])).push(listener); },
            removeEventListener: (type, listener) => { let i = cbs[type] ? cbs[type].indexOf(listener) : -1; if (i > -1) cbs[type].splice(i, 1); },
            'register': async function() { return cc.dispatch('register', { identity, clientId, args: [] }); },
            'runFunction': async function(mnemonic, panel) { return cc.dispatch('runFunction', { identity, clientId, args: [mnemonic, panel] }); }
        };
    })());
};

export default { getClient };